## **Secure ChatGPT Chatbot - Backend + Frontend**

### **1. Backend Server (server.js)**

```javascript
const express = require('express');
const cors = require('cors');
const path = require('path');
const app = express();

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.static('public')); // Serve static files

// Store your OpenAI API key securely (use environment variables in production)
const OPENAI_API_KEY = process.env.OPENAI_API_KEY || 'your-openai-api-key-here';

// Rate limiting (simple in-memory store)
const rateLimitStore = new Map();

function rateLimit(req, res, next) {
    const ip = req.ip || req.connection.remoteAddress;
    const now = Date.now();
    const windowMs = 60000; // 1 minute
    const maxRequests = 20; // Max 20 requests per minute

    if (!rateLimitStore.has(ip)) {
        rateLimitStore.set(ip, { count: 1, resetTime: now + windowMs });
        return next();
    }

    const userLimit = rateLimitStore.get(ip);
    
    if (now > userLimit.resetTime) {
        userLimit.count = 1;
        userLimit.resetTime = now + windowMs;
        return next();
    }

    if (userLimit.count >= maxRequests) {
        return res.status(429).json({ 
            error: 'Too many requests. Please wait a moment.' 
        });
    }

    userLimit.count++;
    next();
}

// Chat endpoint
app.post('/api/chat', rateLimit, async (req, res) => {
    try {
        const { messages, sessionId } = req.body;

        // Basic validation
        if (!messages || !Array.isArray(messages)) {
            return res.status(400).json({ error: 'Invalid messages format' });
        }

        // Limit message history to prevent large requests
        const limitedMessages = messages.slice(-10);

        // Input sanitization - remove any potential harmful content
        const sanitizedMessages = limitedMessages.map(msg => ({
            role: msg.role,
            content: String(msg.content).slice(0, 1000) // Limit message length
        }));

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini', // Cost-effective model
                messages: [
                    {
                        role: 'system',
                        content: `You are a helpful customer service assistant for our website. 
                        Be concise, friendly, and professional. 
                        If asked about sensitive information, politely redirect to human support.
                        Keep responses under 200 words.`
                    },
                    ...sanitizedMessages
                ],
                max_tokens: 200,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            })
        });

        if (!response.ok) {
            console.error('OpenAI API Error:', response.status, response.statusText);
            return res.status(500).json({ 
                error: 'AI service temporarily unavailable. Please try again.' 
            });
        }

        const data = await response.json();
        
        // Return only the assistant's message
        res.json({
            message: data.choices[0].message.content,
            sessionId: sessionId
        });

    } catch (error) {
        console.error('Chat endpoint error:', error);
        res.status(500).json({ 
            error: 'Service temporarily unavailable. Please try again later.' 
        });
    }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Serve the chatbot widget
app.get('/chatbot', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'chatbot.html'));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Secure chatbot server running on port ${PORT}`);
    console.log(`Chatbot widget available at: http://localhost:${PORT}/chatbot`);
});
```

### **2. Frontend Widget (public/chatbot.html)**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chatbot Demo</title>
</head>
<body>
    <!-- Demo page content -->
    <div style="padding: 20px; max-width: 800px; margin: 0 auto;">
        <h1>AI Chatbot Demo</h1>
        <p>This is a demo page showing the chatbot widget. The chatbot will appear in the bottom-right corner.</p>
        <p>Try asking questions like:</p>
        <ul>
            <li>"What are your business hours?"</li>
            <li>"How can I contact support?"</li>
            <li>"Tell me about your services"</li>
        </ul>
    </div>

    <!-- Chatbot Widget -->
    <div id="ai-chatbot-container">
        <div id="ai-chatbot-toggle">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z"/>
            </svg>
        </div>
        
        <div id="ai-chatbot-widget" class="hidden">
            <div id="ai-chatbot-header">
                <div>
                    <div class="chatbot-title">AI Assistant</div>
                    <div class="chatbot-status">Online</div>
                </div>
                <button id="ai-chatbot-close">&times;</button>
            </div>
            
            <div id="ai-chatbot-messages">
                <div class="message bot-message">
                    ðŸ‘‹ Hi! I'm your AI assistant. How can I help you today?
                </div>
            </div>
            
            <div id="ai-chatbot-input-area">
                <div id="ai-chatbot-input-container">
                    <input 
                        type="text" 
                        id="ai-chatbot-input" 
                        placeholder="Type your message..."
                        maxlength="500"
                    >
                    <button id="ai-chatbot-send" disabled>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                        </svg>
                    </button>
                </div>
                <div class="chatbot-footer">
                    Powered by AI â€¢ <span id="message-counter">0/500</span>
                </div>
            </div>
        </div>
    </div>

    <style>
        /* Chatbot Styles */
        #ai-chatbot-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 10000;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        #ai-chatbot-toggle {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
            transition: all 0.3s ease;
        }

        #ai-chatbot-toggle:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 25px rgba(102, 126, 234, 0.6);
        }

        #ai-chatbot-widget {
            position: absolute;
            bottom: 70px;
            right: 0;
            width: 380px;
            height: 600px;
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            transform: translateY(10px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        #ai-chatbot-widget:not(.hidden) {
            transform: translateY(0);
            opacity: 1;
        }

        #ai-chatbot-widget.hidden {
            display: none;
        }

        #ai-chatbot-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chatbot-title {
            font-weight: 600;
            font-size: 16px;
        }

        .chatbot-status {
            font-size: 12px;
            opacity: 0.8;
        }

        #ai-chatbot-close {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s;
        }

        #ai-chatbot-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        #ai-chatbot-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
            background: #f8f9fa;
        }

        .message {
            max-width: 85%;
            padding: 12px 16px;
            border-radius: 18px;
            line-height: 1.4;
            font-size: 14px;
            word-wrap: break-word;
            animation: messageSlide 0.3s ease;
        }

        @keyframes messageSlide {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .user-message {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 6px;
        }

        .bot-message {
            background: white;
            color: #333;
            align-self: flex-start;
            border-bottom-left-radius: 6px;
            border: 1px solid #e9ecef;
        }

        .typing-indicator {
            background: white;
            color: #666;
            align-self: flex-start;
            border-bottom-left-radius: 6px;
            border: 1px solid #e9ecef;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .typing-dots {
            display: flex;
            gap: 2px;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            background: #667eea;
            border-radius: 50%;
            animation: typingPulse 1.4s infinite ease-in-out both;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }

        @keyframes typingPulse {
            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
            40% { transform: scale(1); opacity: 1; }
        }

        #ai-chatbot-input-area {
            background: white;
            border-top: 1px solid #e9ecef;
        }

        #ai-chatbot-input-container {
            padding: 20px;
            display: flex;
            gap: 10px;
            align-items: flex-end;
        }

        #ai-chatbot-input {
            flex: 1;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 24px;
            outline: none;
            font-size: 14px;
            resize: none;
            transition: border-color 0.2s;
        }

        #ai-chatbot-input:focus {
            border-color: #667eea;
        }

        #ai-chatbot-send {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            width: 44px;
            height: 44px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        #ai-chatbot-send:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        #ai-chatbot-send:not(:disabled):hover {
            transform: scale(1.05);
        }

        .chatbot-footer {
            padding: 8px 20px 16px;
            font-size: 11px;
            color: #666;
            text-align: center;
        }

        /* Mobile Responsive */
        @media (max-width: 480px) {
            #ai-chatbot-widget {
                width: calc(100vw - 40px);
                height: calc(100vh - 100px);
                bottom: 20px;
                right: 20px;
                left: 20px;
            }
        }

        /* Scrollbar Styling */
        #ai-chatbot-messages::-webkit-scrollbar {
            width: 4px;
        }

        #ai-chatbot-messages::-webkit-scrollbar-track {
            background: transparent;
        }

        #ai-chatbot-messages::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 2px;
        }
    </style>

    <script>
        class SecureChatBot {
            constructor() {
                this.messages = [];
                this.sessionId = this.generateSessionId();
                this.isProcessing = false;
                this.baseUrl = window.location.origin; // Automatically use current domain
                this.init();
            }

            generateSessionId() {
                return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }

            init() {
                this.bindEvents();
                this.updateSendButton();
            }

            bindEvents() {
                const toggle = document.getElementById('ai-chatbot-toggle');
                const widget = document.getElementById('ai-chatbot-widget');
                const close = document.getElementById('ai-chatbot-close');
                const input = document.getElementById('ai-chatbot-input');
                const send = document.getElementById('ai-chatbot-send');

                toggle.addEventListener('click', () => {
                    widget.classList.toggle('hidden');
                    if (!widget.classList.contains('hidden')) {
                        input.focus();
                    }
                });

                close.addEventListener('click', () => {
                    widget.classList.add('hidden');
                });

                send.addEventListener('click', () => {
                    this.sendMessage();
                });

                input.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        this.sendMessage();
                    }
                });

                input.addEventListener('input', () => {
                    this.updateMessageCounter();
                    this.updateSendButton();
                });

                // Close widget when clicking outside
                document.addEventListener('click', (e) => {
                    if (!document.getElementById('ai-chatbot-container').contains(e.target)) {
                        widget.classList.add('hidden');
                    }
                });
            }

            updateMessageCounter() {
                const input = document.getElementById('ai-chatbot-input');
                const counter = document.getElementById('message-counter');
                counter.textContent = `${input.value.length}/500`;
            }

            updateSendButton() {
                const input = document.getElementById('ai-chatbot-input');
                const send = document.getElementById('ai-chatbot-send');
                const message = input.value.trim();
                
                send.disabled = !message || this.isProcessing;
            }

            async sendMessage() {
                const input = document.getElementById('ai-chatbot-input');
                const message = input.value.trim();

                if (!message || this.isProcessing) return;

                this.isProcessing = true;
                input.disabled = true;
                this.updateSendButton();

                // Add user message
                this.addMessage(message, 'user');
                input.value = '';
                this.updateMessageCounter();

                // Show typing indicator
                const typingId = this.showTypingIndicator();

                try {
                    // Add user message to conversation history
                    this.messages.push({
                        role: 'user',
                        content: message
                    });

                    const response = await this.callChatAPI();
                    
                    // Remove typing indicator
                    this.removeMessage(typingId);
                    
                    // Add bot response
                    this.addMessage(response.message, 'bot');
                    
                    // Add bot response to conversation history
                    this.messages.push({
                        role: 'assistant',
                        content: response.message
                    });

                    // Keep conversation history manageable
                    if (this.messages.length > 20) {
                        this.messages = this.messages.slice(-20);
                    }

                } catch (error) {
                    console.error('Chat error:', error);
                    this.removeMessage(typingId);
                    
                    let errorMessage = 'Sorry, I encountered an error. Please try again.';
                    if (error.message.includes('429')) {
                        errorMessage = 'Too many messages. Please wait a moment before trying again.';
                    } else if (error.message.includes('network')) {
                        errorMessage = 'Network error. Please check your connection and try again.';
                    }
                    
                    this.addMessage(errorMessage, 'bot');
                } finally {
                    this.isProcessing = false;
                    input.disabled = false;
                    this.updateSendButton();
                    input.focus();
                }
            }

            async callChatAPI() {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

                try {
                    const response = await fetch(`${this.baseUrl}/api/chat`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            messages: this.messages,
                            sessionId: this.sessionId
                        }),
                        signal: controller.signal
                    });

                    clearTimeout(timeoutId);

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.error || `HTTP ${response.status}`);
                    }

                    return await response.json();
                } catch (error) {
                    clearTimeout(timeoutId);
                    if (error.name === 'AbortError') {
                        throw new Error('Request timeout. Please try again.');
                    }
                    throw error;
                }
            }

            addMessage(text, type) {
                const messagesContainer = document.getElementById('ai-chatbot-messages');
                const messageDiv = document.createElement('div');
                const messageId = Date.now() + Math.random();
                
                messageDiv.className = `message ${type}-message`;
                messageDiv.id = `message-${messageId}`;
                messageDiv.textContent = text;
                
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                return messageId;
            }

            showTypingIndicator() {
                const messagesContainer = document.getElementById('ai-chatbot-messages');
                const typingDiv = document.createElement('div');
                const typingId = Date.now() + Math.random();
                
                typingDiv.className = 'message typing-indicator';
                typingDiv.id = `message-${typingId}`;
                typingDiv.innerHTML = `
                    AI is typing
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                `;
                
                messagesContainer.appendChild(typingDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                return typingId;
            }

            removeMessage(messageId) {
                const messageElement = document.getElementById(`message-${messageId}`);
                if (messageElement) {
                    messageElement.remove();
                }
            }
        }

        // Initialize chatbot when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new SecureChatBot();
        });
    </script>
</body>
</html>
```

### **3. Package.json**

```json
{
  "name": "secure-chatbot",
  "version": "1.0.0",
  "description": "Secure ChatGPT chatbot with hidden API key",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
```

### **4. Environment Setup (.env)**

```bash
# Create .env file for production
OPENAI_API_KEY=your-actual-openai-api-key-here
PORT=3000
NODE_ENV=production
```

### **5. Installation & Setup**

```bash
# 1. Create project directory
mkdir secure-chatbot
cd secure-chatbot

# 2. Initialize npm and install dependencies
npm init -y
npm install express cors
npm install --save-dev nodemon

# 3. Create folder structure
mkdir public

# 4. Add your OpenAI API key to server.js or .env file

# 5. Run the server
npm start

# For development with auto-restart:
npm run dev
```

### **6. Embedding on Any Website**

To embed this chatbot on any website, just add this single line:

```html
<!-- Add this to any website -->
<iframe 
    src="https://your-domain.com/chatbot" 
    style="position:fixed;bottom:0;right:0;width:400px;height:650px;border:none;z-index:9999;"
    allowtransparency="true">
</iframe>
```

Or include the widget directly:

```html
<!-- Copy the entire chatbot div and scripts from chatbot.html -->
<!-- Update the baseUrl in the JavaScript to point to your server -->
```

## **Key Security Features:**

1. **API Key Hidden**: Never exposed to frontend
2. **Rate Limiting**: Prevents abuse (20 requests/minute per IP)
3. **Input Validation**: Sanitizes and limits message length
4. **Session Management**: Tracks conversations securely
5. **Error Handling**: Graceful degradation on failures
6. **CORS Protection**: Configurable cross-origin requests
7. **Request Timeout**: Prevents hanging connections

This implementation is production-ready and keeps your OpenAI API key completely secure on the backend while providing a smooth user experience.